# -*- coding: utf-8 -*-
"""
Created on Tue Feb  2 15:13:32 2021

@author: USER_2
"""
import numpy as np

###############################################################################
# Smoothing scheme for calculating velocity
# 6 points weighted average, see Stewart et al. (2001)
# KCole PEPT Flotation 020221
###############################################################################

def velocity_six_points(location_data):
    x = location_data['x']
    y = location_data['y']
    z = location_data['z']
    t = location_data['t']
    t_reduced = t[5:-6]
    dxdt = 0.1*((x[10:-1]-x[5:-6])/(t[10:-1]-t[5:-6])) + 0.15*((x[9:-2]-x[4:-7])/(t[9:-2]-t[4:-7])) + 0.25*((x[8:-3]-x[3:-8])/(t[8:-3]-t[3:-8])) + 0.25*((x[7:-4]-x[2:-9])/(t[7:-4]-t[2:-9])) + 0.15*((x[6:-5]-x[1:-10])/(t[6:-5]-t[1:-10])) + 0.1*((x[5:-6]-x[0:-11])/(t[5:-6]-t[0:-11]))
    dydt = 0.1*((y[10:-1]-y[5:-6])/(t[10:-1]-t[5:-6])) + 0.15*((y[9:-2]-y[4:-7])/(t[9:-2]-t[4:-7])) + 0.25*((y[8:-3]-y[3:-8])/(t[8:-3]-t[3:-8])) + 0.25*((y[7:-4]-y[2:-9])/(t[7:-4]-t[2:-9])) + 0.15*((y[6:-5]-y[1:-10])/(t[6:-5]-t[1:-10])) + 0.1*((y[5:-6]-y[0:-11])/(t[5:-6]-t[0:-11]))
    dzdt = 0.1*((z[10:-1]-z[5:-6])/(t[10:-1]-t[5:-6])) + 0.15*((z[9:-2]-z[4:-7])/(t[9:-2]-t[4:-7])) + 0.25*((z[8:-3]-z[3:-8])/(t[8:-3]-t[3:-8])) + 0.25*((z[7:-4]-z[2:-9])/(t[7:-4]-t[2:-9])) + 0.15*((z[6:-5]-z[1:-10])/(t[6:-5]-t[1:-10])) + 0.1*((z[5:-6]-z[0:-11])/(t[5:-6]-t[0:-11]))
    sp = np.sqrt(dxdt**2 + dydt**2 + dzdt**2)
    velocity_data = {'t_reduced':t_reduced, 'dxdt':dxdt, 'dydt':dydt, 'dzdt':dzdt, 'sp':sp, 't':t}
    return velocity_data